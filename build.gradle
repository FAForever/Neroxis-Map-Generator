import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group 'net.com.faforever.neroxis'
version "${version}"

sourceCompatibility = JavaVersion.VERSION_15

compileJava.options.compilerArgs.add '-parameters'
compileTestJava.options.compilerArgs.add '-parameters'


// source: https://github.com/mendhak/Gradle-Travis-Colored-Output/blob/master/ColoredOutput.gradle
tasks.withType(Test) {

    String ANSI_BOLD_WHITE = "\u001B[0;1m"
    String ANSI_RESET = "\u001B[0m"
    String ANSI_BLACK = "\u001B[30m"
    String ANSI_RED = "\u001B[31m"
    String ANSI_GREEN = "\u001B[32m"
    String ANSI_YELLOW = "\u001B[33m"
    String ANSI_BLUE = "\u001B[34m"
    String ANSI_PURPLE = "\u001B[35m"
    String ANSI_CYAN = "\u001B[36m"
    String ANSI_WHITE = "\u001B[37m"
    String CHECK_MARK = "\u2713"
    String NEUTRAL_FACE = "\u0CA0_\u0CA0"
    String X_MARK = "\u274C"
    String indent = '    '

    afterTest { descriptor, result ->
        if (result.failedTestCount > 0) {
            String exceptions = result.getException().toString().split("\\n").join("\n" + indent)

            out.println("\n" + ANSI_BOLD_WHITE + descriptor.parent.name + ANSI_RESET
                    + "\n" + indent + ANSI_RED + X_MARK + ANSI_RESET + " " + descriptor.name
                    + "\n" + indent + exceptions)
        }
    }

    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            def failStyle = ANSI_RED
            def skipStyle = ANSI_YELLOW
            def summaryStyle = ANSI_WHITE

            switch (result.resultType) {
                case TestResult.ResultType.SUCCESS:
                    summaryStyle = ANSI_GREEN
                    break
                case TestResult.ResultType.FAILURE:
                    summaryStyle = ANSI_RED
                    break
            }

            out.println("--------------------------------------------------------------------------")
            out.println("Results: " + summaryStyle + "${result.resultType}" + ANSI_RESET
                    + " (${result.testCount} tests, "
                    + ANSI_GREEN + "${result.successfulTestCount} passed" + ANSI_RESET
                    + ", " + failStyle + "${result.failedTestCount} failed" + ANSI_RESET
                    + ", " + skipStyle + "${result.skippedTestCount} skipped" + ANSI_RESET
                    + ")")
            out.println("--------------------------------------------------------------------------")
        }
    }
}

test {
    useJUnitPlatform()
    systemProperties = [
            'junit.jupiter.execution.parallel.enabled': true
    ]
}


repositories {
    maven { url "https://jitpack.io" }
    mavenCentral()
}

dependencies {
    implementation("org.luaj:luaj-jse:3.0.1")
    implementation("com.google.guava:guava:31.0.1-jre")
    implementation('com.dslplatform:dsl-json-java8:1.9.9')
    implementation('org.springframework:spring-expression:5.3.15')
    implementation('net.objecthunter:exp4j:0.4.8')
    implementation('org.jgrapht:jgrapht-core:1.5.1')
    implementation('com.github.tomnelson:jungrapht-visualization:1.3')
    implementation('com.fathzer:javaluator:3.0.3')
    compileOnly('org.projectlombok:lombok:1.18.22')
    annotationProcessor('org.projectlombok:lombok:1.18.22')
    annotationProcessor('com.dslplatform:dsl-json-java8:1.9.9')

    testImplementation('org.junit.jupiter:junit-jupiter-api:5.8.2')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.8.2')
}

shadowJar {
    getArchiveFileName().set("NeroxisGen_${generatorVersion}.jar")
    manifest {
        attributes 'Main-Class': 'com.faforever.neroxis.map.generator.MapGenerator',
                "Implementation-Version": generatorVersion,
                "Impletementation-Title": "Neroxis Map Generator"
    }
    duplicatesStrategy = DuplicatesStrategy.WARN
}

task populatorJar(type: ShadowJar) {
    getArchiveBaseName().set('MapPopulator')
    from(sourceSets.main.output) {
        manifest {
            attributes 'Main-Class': 'com.faforever.neroxis.map.populator.MapPopulator'
        }
    }
    project.configurations.implementation.canBeResolved = true
    configurations = [project.configurations.implementation]
    duplicatesStrategy = DuplicatesStrategy.WARN
}

task evaluatorJar(type: ShadowJar) {
    getArchiveBaseName().set('MapEvaluator')
    from(sourceSets.main.output) {
        manifest {
            attributes 'Main-Class': 'com.faforever.neroxis.map.evaluator.MapEvaluator'
        }
    }
    project.configurations.implementation.canBeResolved = true
    configurations = [project.configurations.implementation]
    duplicatesStrategy = DuplicatesStrategy.WARN
}

task transformerJar(type: ShadowJar) {
    getArchiveBaseName().set('MapTransformer')
    from(sourceSets.main.output) {
        manifest {
            attributes 'Main-Class': 'com.faforever.neroxis.map.transformer.MapTransformer'
        }
    }
    project.configurations.implementation.canBeResolved = true
    configurations = [project.configurations.implementation]
    duplicatesStrategy = DuplicatesStrategy.WARN
}

task detectorJar(type: ShadowJar) {
    getArchiveBaseName().set('GeneratedMapDetector')
    from(sourceSets.main.output) {
        manifest {
            attributes 'Main-Class': 'com.faforever.neroxis.map.evaluator.GeneratedMapDetector'
        }
    }
    project.configurations.implementation.canBeResolved = true
    configurations = [project.configurations.implementation]
    duplicatesStrategy = DuplicatesStrategy.WARN
}

task reshaderJar(type: ShadowJar) {
    getArchiveBaseName().set('MapReshader')
    from(sourceSets.main.output) {
        manifest {
            attributes 'Main-Class': 'com.faforever.neroxis.map.reshader.MapReshader'
        }
    }
    project.configurations.implementation.canBeResolved = true
    configurations = [project.configurations.implementation]
    duplicatesStrategy = DuplicatesStrategy.WARN
}