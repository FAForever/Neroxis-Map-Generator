buildscript {
    ext {
        jgraph_version = '1.5.2'
    }
}

allprojects {
    apply plugin: 'java'
    group 'com.faforever.neroxis'

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation('info.picocli:picocli:4.7.5')
        implementation('com.github.therapi:therapi-runtime-javadoc:0.15.0')
        compileOnly('org.projectlombok:lombok:1.18.30')

        annotationProcessor('org.projectlombok:lombok:1.18.30')
        annotationProcessor('info.picocli:picocli-codegen:4.7.5')
        annotationProcessor('com.github.therapi:therapi-runtime-javadoc-scribe:0.15.0')

        def junitVersion = '5.10.1'
        testImplementation("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
        testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    }

    test {
        useJUnitPlatform()
        systemProperties = [
                'junit.jupiter.execution.parallel.enabled': true
        ]
    }

    tasks.withType(JavaCompile) {
        configure(options) {
            options.compilerArgs << '-parameters'
        }
    }

    // source: https://github.com/mendhak/Gradle-Travis-Colored-Output/blob/master/ColoredOutput.gradle
    tasks.withType(Test) {
        String ANSI_BOLD_WHITE = "\u001B[0;1m"
        String ANSI_RESET = "\u001B[0m"
        String ANSI_BLACK = "\u001B[30m"
        String ANSI_RED = "\u001B[31m"
        String ANSI_GREEN = "\u001B[32m"
        String ANSI_YELLOW = "\u001B[33m"
        String ANSI_BLUE = "\u001B[34m"
        String ANSI_PURPLE = "\u001B[35m"
        String ANSI_CYAN = "\u001B[36m"
        String ANSI_WHITE = "\u001B[37m"
        String CHECK_MARK = "\u2713"
        String NEUTRAL_FACE = "\u0CA0_\u0CA0"
        String X_MARK = "\u274C"
        String indent = '    '

        afterTest { descriptor, result ->
            if (result.failedTestCount > 0) {
                String exceptions = result.getException().toString().split("\\n").join("\n" + indent)

                out.println("\n" + ANSI_BOLD_WHITE + descriptor.parent.name + ANSI_RESET
                        + "\n" + indent + ANSI_RED + X_MARK + ANSI_RESET + " " + descriptor.name
                        + "\n" + indent + exceptions)
            }
        }

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def failStyle = ANSI_RED
                def skipStyle = ANSI_YELLOW
                def summaryStyle = ANSI_WHITE

                switch (result.resultType) {
                    case TestResult.ResultType.SUCCESS:
                        summaryStyle = ANSI_GREEN
                        break
                    case TestResult.ResultType.FAILURE:
                        summaryStyle = ANSI_RED
                        break
                }

                out.println("--------------------------------------------------------------------------")
                out.println("Results: " + summaryStyle + "${result.resultType}" + ANSI_RESET
                        + " (${result.testCount} tests, "
                        + ANSI_GREEN + "${result.successfulTestCount} passed" + ANSI_RESET
                        + ", " + failStyle + "${result.failedTestCount} failed" + ANSI_RESET
                        + ", " + skipStyle + "${result.skippedTestCount} skipped" + ANSI_RESET
                        + ")")
                out.println("--------------------------------------------------------------------------")
            }
        }
    }
}